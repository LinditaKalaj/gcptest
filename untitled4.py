# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BatTzjGNEiqZdNG0M0sAUg2wU_e5gQ7d
"""

import tensorflow as tf


# setup hosts
ps_hosts = ['10.189.253.1:2222']
worker_hosts = ['10.189.253.2:2222', '10.189.253.3:2222']

# create a cluster from the parameter server and worker hosts.
cluster = tf.train.ClusterSpec({
    'ps': ps_hosts,
    'worker': worker_hosts
})


def worker(job_name, task_index):
    # create server 
    server = tf.train.Server(
        server_or_cluster_def=cluster,
        job_name=job_name,
        task_index=task_index
    )

    if job_name == 'ps':
        print('Start Parameter Sever: ', task_index)
        server.join()
    elif job_name == 'worker':
        # Assigns ops to the local worker by default.
        with tf.device(
                tf.train.replica_device_setter(
                    worker_device='job:worker/task:{}'.format(task_index),
                    cluster=cluster
                )
        ):
            # count the number of updates
            global_step = tf.Variable(0, name='global_step', trainable=False)

            # TODO: build the graph
            input_placeholder = ...  # placeholders
            layer = ...  # neural network layers
            prediction = ...  # predictions
            loss = ...  # loss
            train_op = ...  # train operation

            # create TensorBoard summaries
            tf.summary.scalar('loss', loss)

            # merge all summaries into a single operation which we can execute in a session
            summary_op = tf.summary.merge_all()

        # the StopAtStepHook handles stopping after running given steps
        hooks = [tf.train.StopAtStepHook(last_step=100000)]
        
        # session configuration
        config = tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)
        config.gpu_options.allow_growth = True
        
        # start session
        with tf.train.MonitoredTrainingSession(
            config=config,
            master=server.target,
            is_chief=(task_index == task_index),
            checkpoint_dir='tem/train_logs',
            hooks=hooks
        ) as sess:
            # tf.MonitoredTrainingSession takes care of session starting and stopping
            while not sess.should_stop():
                # TODO: read input data and train the model
                sess.run(train_op)


if __name__ == '__main__':
    # TODO: add argparse
    worker('ps', 0)  # or worker('worker', task_index)